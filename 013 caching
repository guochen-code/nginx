benefits of caching:
- reduce the overhead of server's resources
- decrease the network bandwidth
- pages are loaded much more faster

*************** HTTP cache control headers
in some circumstances, we donot want caching because we want the latest data from the server, data stored in the cache server may be old, like stock market and banking
cache control headers are used to specify various directives for caching mechanisms.
these headers are used to define caching policies with various directives provided by the header.
example:
- do not store any kind of cache at all.
- store the cache, but verify with webserver whether file is modified.
- store the cache for 24 hours.

we have two pictures, one with cache control while the other not:
curl -I http://dexter.kplabs.in/myseed.jpg -> no cache header # by default, it will cache
curl -I http://dexter.kplabs.in/nostore.png -> Cache-Control: no-store

There are various cache-control header directives:
Cache-Control: no-store.    # not store anywhere
Cache-Control: no-cache     # cache, but before serve the cached data, it will validate with the backend server whether it is the latest data
Cache-Control: no-store, no-cache, must-revalidate

Cache-Control: public
Cache-Control: private

************************* how to configure
cd /etc/nginx/conf.d
nano web.conf

sever {
    listen      80;
    server_name example.com;
    
    location / {
        root /var/www/websites/;
        index index.html index.html;
    }
    location ~ \.(png) {                      # for all files with extension as .png
        root /var/www/websites/;
        add_header Cache-Control no-store;     # cache control
  }
}

****************************** no-cache: what if the backend server is down and it can no longer validate
we want that the cache will send a header warming that this is stale data (because not able to validate because the server is down)
what if you only want to ensure it is latest data, no chance for stale data. that's where header "must-revalidate" kicks in.
so it should throw an error back if the backend server is down.

*** private vs public 
add_header Cache-Control private max-age=200; private - data considered fresh within 200 seconds, no need to revalidate
add_header Cache-Control public s-maxage=500; public - particulary for the intermediate cache server, data considered fresh within 500 seconds
add_header Cache-Control no-cache must-revalidate;

****************************** max-age & s-maxage
private cache: browser (individual)
public cache: intermediate cache server

example:

location ~ \.(html){
    root /var/www/websites/example;
    add_header Cache-Control max-age=120; # private(browser) - for any documents ended with .html
    add_header Cache-Control smax-age=200; # public(intermediate server) - for any documents ended with .html
  }

location ~ \.(html){
    root /var/www/websites/example;
    add_header Cache-Control max-age=120; # for both private(browser) & public(intermediate server) - for any documents ended with .html
  }
 
****************************** cache time & browser analysis
server {
    server_name example.com;
        location / {
            root /var/www/websites/example;
            index index.html index.html;
         }
         location ~ \ .(png) {
            root /var/www/websites/example;
            expires 1h;
         }
         location ~ \.(txt) {
            root /var/www/websites/example;
            expires -1;     # -1 means no Cache-Control: no-cache
         }
}

# expires for HTTP1.0 while in HTTP1.1 it introduces new headers: max-age/smax-age !!!!!!!!!!!!!!

****************************** keepalive: HTTP1.1 is mandatory while HTTP1.0 is optional

****************************** data & expires header (see above)


